#!/bin/bash
#
# A multi-version compiler script for MQL4.0, MQL4.5 and MQL5 source files. Supports batch-processing of multiple files
# and directories. Prints results to STDOUT and follows standard rules for the exit status. The syntax is compatible with
# the command line syntax of MetaEditor.
#
# Configuration via environment or config file.
#
# @see  "/.env.dist"
# @see  https://www.metatrader5.com/en/metaeditor/help/beginning/integration_ide#compiler
#
#
# TODO:
#  - parse glob patterns in path arguments
#  - improve error messages for filenames looking like options
#  - normalize source file/directories and filter duplicates
#  - create helper.bat dynamically
#  - move config to standard location
#  - colored output
#  - silently support /inc:
#
set -eu -o pipefail


#
# Show the help screen.
#
function help() {
  cat << 'SYNTAX'
Compiles one or more MQL4.0, MQL4.5 or MQL5 source files or directories.

Usage: mqlc  [options] [--] SOURCE...
       mqlc  [options] /compile:(FILE|DIR) [/include:DIR] [/log[:FILE]]

Arguments:
  SOURCE         One or more source files or directories to compile. Supports wildcards.

Options:
  -h --help      This screen.
  /compile:FILE  Source file to compile. Doesn't support wildcards.
  /compile:DIR   Source directory to compile. Recompiles new and modified source files (not subdirectories).
  /include:DIR   Custom MQL resources directory (default: "<data-dir>/MQL4" or "<data-dir>/MQL5").
  /log           Write output to log file "<source-file.log>" (default: "<data-dir>/logs/metaeditor.log").
  /log:FILE      Write output to custom log file.
  -f=VERSION     MQL4 source file format, either "mql40" or "mql45" (default: see below).
  -c --clean     With /compile:DIR, recompiles all source files of a directory.
  -s --syntax    Syntax check only, no compilation.
  -o --original  Display the original and unmodified compiler output only.
  -q --quiet     Quiet mode, doesn't write anything to STDOUT.
  -w             Treat compiler warnings as errors, modifies the exit status for warnings.

Supported short option prefixes are "-" and "/", supported option argument separators are ":" and "=".

Used MQL compilers:
 Compilers to be used can be specified in the environment or predefined in the configuration (see "/.env.dist").

Auto-detection of MQL4 source file formats:
 If the base name of the MQL resources directory resolves to "experts" or "mql40", source file format "mql40" is assumed.
 If the base name of the MQL resources directory resolves to "mql4" or "mql45", source file format "mql45" is assumed.
 A specified source format For MQL5 files is ignored.
 Default source file formats for custom directories can be predefined in the configuration (see "/.env.dist").

On success the script exits with 0 (zero), a non-zero exit status indicates processing or compilation errors.
Errors and warnings are always logged to file, either to "<source-file.log>" or to a specified custom log file.

SYNTAX
}


#
# Print a message to STDERR.
#
# @param $@ - any number of arguments
#
function error() {
  echo "$@" 1>&2
}


#
# Normalize a path argument. Strips enclosing double quotes and trims white-space.
#
# @param $1 - path
#
function normalizeArg() {
  local str="$1"
  [[ "$str" =~ ^\"(.*)\"$ ]] && str="${BASH_REMATCH[1]}"    # strip enclosing double quotes
  str="${str#"${str%%[![:space:]]*}"}"                      # trim leading white space
  str="${str%"${str##*[![:space:]]}"}"                      # trim trailing white-space
  echo "$str"
}


#
# cygpath doesn't support the "--" option separator. It breaks if the passed filename/path starts with "-".
# This function provides a fix.
#
# @param $1 - argument
#
function prefixHyphen() {
  local arg="$1"
  [[ "$arg" == -* ]] && arg="./$arg"
  echo "$arg"
}


#
# Get the file extension of the passed name.
#
# @param $1 - filename
#
function getFileExtension() {
  local ext="${1##*.}"
  [[ "$1" == "$ext" ]] && ext=
  echo "$ext"
}


#
# Resolve the MQL version of a source file, taking into account an explicit or configured value.
#
# @param $1 - filename
#
function resolveMqlVersion() {
  local ext="$(getFileExtension "$1")"
  [[ "${ext,,}" == "mq5" ]] && echo "mql5" || echo "$format"
}


#
# Read the configuration into global vars.
#
function readConfig() {
  # backup existing env vars
  local BAK_MT4_METALANG="${MT4_METALANG:-}"
  local BAK_MT4_METAEDITOR="${MT4_METAEDITOR:-}"
  local BAK_MT5_METAEDITOR="${MT5_METAEDITOR:-}"

  # source an existing .env file
  local scriptDir="$(dirname "$(realpath "$0")")"
  local envFile="$scriptDir/../.env"
  [[ -f "$envFile" ]] && . "$envFile"

  # resolve final values: environment precedes config file
  MT4_METALANG="${BAK_MT4_METALANG:-${MT4_METALANG:-}}"
  MT4_METAEDITOR="${BAK_MT4_METAEDITOR:-${MT4_METAEDITOR:-}}"
  MT5_METAEDITOR="${BAK_MT5_METAEDITOR:-${MT5_METAEDITOR:-}}"

  # validate base names
  if [[ -n "$MT5_METAEDITOR" ]]; then
    basename="$(basename "$MT5_METAEDITOR")"
    [[ "${basename,,}" == "metaeditor64.exe" ]] || { error "ERROR: The base name of the configured MQL5 compiler must be: \"metaeditor64.exe\""; exit 1; }
  fi
  readonly MT4_METALANG MT4_METAEDITOR MT5_METAEDITOR
}


#
# Compile an MQL4.0 source file.
#
# @param $1 - filename
#
function compileMql40() {
  [[ -z "$MT4_METALANG" ]] && { error "ERROR: MQL4.0 compiler is not configured"; exit 1; }
  [[ -f "$MT4_METALANG" ]] || { error "ERROR: MQL4.0 compiler not found: \"$MT4_METALANG\""; exit 1; }

  local srcFile="$1" mqlc="$MT4_METALANG" status=0 output=() line= errors=0 ple= warnings=0 plw=

  # call the compiler
  (($original)) || echo "Compiling \"$srcFile\" as MQL4.0"
  mapfile -t output < <(                                              # TODO: make sure "./experts/include" exists and points to the right location
    { MSYS_NO_PATHCONV=1 "$mqlc" "$srcFile" < /dev/null 2>&1 || status=$?; echo "$status"; } | tr -d '\r'
  )
  status="${output[-1]}"                                              # fetch exit status from output and remove it
  unset 'output[-1]'

  if ((!$original)); then
    # on success
    if [[ $status -eq 0 ]]; then
      [[ "${output[-1]}" =~ ^Exp\ file\ .+\ produced\ -\ ([0-9]+)\ error.+\ ([0-9]+)\ warning.+ ]] || {
        error "ERROR: unexpected compiler output in last line: \"${output[-1]}\""
        exit 1
      }
      errors="${BASH_REMATCH[1]}";   (($errors   == 1)) && ple= || ple="s"
      warnings="${BASH_REMATCH[2]}"; (($warnings == 1)) && plw= || plw="s"

      output[-1]="Result: $errors error$ple, $warnings warning$plw"   # TODO: , ??? msec elapsed
      ((!$warnings)) && output+=("Success")
    fi

    # on error
    if [[ $status -ne 0 ]]; then
      if [[ ${#output[@]} -lt 4 ]]; then                              # no error messages happen for empty source files only
        [[ "$status" -ne 127 ]] && { error "ERROR: unexpected compiler output for status $status: no error message"; exit 1; }
        output+=("2;356;$srcFile;1:1;'' - event handling function not found")
        ((errors++)) || :
      else
        # count errors and warnings
        local i=
        for ((i=3; i < ${#output[@]}; i++)); do
          [[ "${output[i]}" == [0-9]* ]] || break
          [[ "${output[i]}" == [1]* ]] && { ((warnings++)) || :; continue; }
          [[ "${output[i]}" == [2]* ]] && { ((errors++))   || :; continue; }
          error "ERROR: unknown message type in: ${output[i]}"
          exit 1
        done
      fi

      [[ "${output[-1]}" =~ ^[[:space:]]*$ ]] && unset 'output[-1]'   # remove an empty last line
      [[ "${output[-1]}" == See\ logfile*  ]] && unset 'output[-1]'   # remove a logfile hint
      [[ "${output[-1]}" == Errors--[0-9]+ ]] && unset 'output[-1]'   # remove an error counter
      [[ "${output[-1]}" =~ ^[[:space:]]*$ ]] && unset 'output[-1]'   # remove another empty last line

      # add final results
      (($errors   == 1)) && ple= || ple="s"
      (($warnings == 1)) && plw= || plw="s"
      output+=("Result: $errors error$ple, $warnings warning$plw")    # TODO: , ??? msec elapsed
      output+=("Error")
    fi

    # remove copyright
    [[ "${output[1]}" =~ ^Copyright\ [0-9]+-[0-9]+,\ MetaQuotes ]] && unset 'output[1]'
  fi

  # print everything to STDOUT
  for line in "${output[@]}"; do
    echo "$line"
  done
  return "$status"

  notes << EOF
  metalang.exe's exit code is the number of encountered errors (0 = no errors but possibly warnings).

  success w/o warnings
  --------------------
  $ MSYS_NO_PATHCONV=1 metalang.exe "Dow Jones Breakout.mq4"; echo $?
  MetaQuotes Language 4 compiler version 4.00 build 224 (14 May 2009)
  Copyright 2001-2009, MetaQuotes Software Corp.

  Exp file "Dow Jones Breakout.ex4" produced - 0 error(s), 0 warning(s)
  0

  success with warnings
  ---------------------
  $ MSYS_NO_PATHCONV=1 metalang.exe "Dow Jones Breakout.mq4"; echo $?
  MetaQuotes Language 4 compiler version 4.00 build 224 (14 May 2009)
  Copyright 2001-2009, MetaQuotes Software Corp.

  1;33;C:\z\F\Projects\mt4\mql\bin\Dow Jones Breakout.mq4;149:8;'5' - comparison expression expected
  Exp file "Dow Jones Breakout.ex4" produced - 0 error(s), 1 warning(s)
  0

  syntax errors
  -------------
  $ MSYS_NO_PATHCONV=1 metalang.exe "Dow Jones Breakout.mq4"; echo $?
  MetaQuotes Language 4 compiler version 4.00 build 224 (14 May 2009)
  Copyright 2001-2009, MetaQuotes Software Corp.

  2;124;C:\z\F\Projects\mt4\mql\bin\Dow Jones Breakout.mq4;146:12;'HandleCommand' - function is not defined
  1;33;C:\z\F\Projects\mt4\mql\bin\Dow Jones Breakout.mq4;149:8;'5' - comparison expression expected

  Errors--1
  See logfile "Dow Jones Breakout.log"
  1

  parser errors
  -------------
  $ MSYS_NO_PATHCONV=1 metalang.exe "Dow Jones Breakout.mq4"; echo $?
  MetaQuotes Language 4 compiler version 4.00 build 224 (14 May 2009)
  Copyright 2001-2009, MetaQuotes Software Corp.

  2;89;C:\z\F\Projects\mt4\mql\bin\Dow Jones Breakout.mq4;526:1;'\end_of_program' - unbalanced left parenthesis
  1

  empty source file
  -----------------
  $ MSYS_NO_PATHCONV=1 metalang.exe empty.mq4; echo $?
  MetaQuotes Language 4 compiler version 4.00 build 224 (14 May 2009)
  Copyright 2001-2009, MetaQuotes Software Corp.
  127

  regular text file as source
  ---------------------------
  $ MSYS_NO_PATHCONV=1 metalang.exe output.txt; echo $?
  MetaQuotes Language 4 compiler version 4.00 build 224 (14 May 2009)
  Copyright 2001-2009, MetaQuotes Software Corp.

  2;114;C:\z\F\Projects\mt4\mql\bin\output.txt;11:53;'some pewa text' - more than 1 symbol
  127

  binary source file
  ------------------
  $ MSYS_NO_PATHCONV=1 metalang.exe metalang.exe; echo $?
  MetaQuotes Language 4 compiler version 4.00 build 224 (14 May 2009)
  Copyright 2001-2009, MetaQuotes Software Corp.

  1;41;C:\z\F\Projects\mt4\mql\bin\metalang.exe;1:1;'MZ▒' - expression on global scope not allowed
  2;75;C:\z\F\Projects\mt4\mql\bin\metalang.exe;1:1;'MZ▒' - variable not defined
  1

  input file not found
  --------------------
  $ MSYS_NO_PATHCONV=1 metalang.exe no-exist.mq4; echo $?
  MetaQuotes Language 4 compiler version 4.00 build 224 (14 May 2009)
  Copyright 2001-2009, MetaQuotes Software Corp.

  2;76;;;cannot open the program file
  127

  access to output file denied
  ----------------------------
  $ MSYS_NO_PATHCONV=1 metalang.exe ChartInfos.mq4; echo $?
  MetaQuotes Language 4 compiler version 4.00 build 224 (14 May 2009)
  Copyright 2001-2009, MetaQuotes Software Corp.

  2;52;;;cannot open the output expert file
  1
EOF
}


#
# Compile an MQL4.5 source file.
#
# @param $1 - filename
#
function compileMql45() {
  [[ -z "$MT4_METAEDITOR" ]] && { error "ERROR: MQL4.5 compiler is not configured"; exit 1; }
  [[ -f "$MT4_METAEDITOR" ]] || { error "ERROR: MQL4.5 compiler not found: \"$MT4_METAEDITOR\""; exit 1; }

  local helper="$(dirname "$(realpath "$0")")/helper.bat"
  [[ -f "$helper" ]] || { error "ERROR: compiler helper not found: \"$helper\""; exit 1; }
  [[ "$helper" =~ \  ]] && helper="$(cygpath -d "$helper")"   # the DOS name prevents argument mangling of quotes (which would break the call)

  local mqlc="$(cygpath -w "$(prefixHyphen "$MT4_METAEDITOR")")" srcFile="$1" logFile="${1%.*}.log"
  local compilerCmd="\"$mqlc\" /compile:\"$srcFile\"" status=0
  [[ -n "$includeDir" ]] && compilerCmd="$compilerCmd /include:\"$includeDir\""
  compilerCmd="$compilerCmd /log:\"$logFile\""

  (($original)) || echo "Compiling \"$srcFile\" as MQL4.5"
  MSYS_NO_PATHCONV=1 cmd /c "$helper $compilerCmd" < /dev/null 2>&1 || status=$?
  [[ -f "$logFile" ]] || { error "ERROR: logfile \"$logFile\" not found (status $status)."; exit 1; }

  # store the logfile in an array (convert to Unix EOL, filter blank lines and infos)
  local output=() line= M= errors=0 warnings=0
  mapfile -t output < <(
    (($original)) && M="rosasurfer"                           # marker to skip filtering if option --original is enabled
    iconv -c -f UTF-16 -t UTF-8 "$logFile" | tr -d '\r' | grep -v -E "^$M[[:space:]]*$|$M: information: (compiling|including|generating code|code generated)"
  )

  if ((!$original)); then
    [[ "${output[-1]}" =~ ([0-9]+)\ errors,\ ([0-9]+)\ warnings ]] || { error "ERROR: unexpected compiler output in last line: \"${output[-1]}\""; exit 1; }
    errors="${BASH_REMATCH[1]}"
    warnings="${BASH_REMATCH[2]}"

    # append success or error message
    status=0
    if (($errors)); then
      output+=("Error")
      status="$errors"
    elif ((!$warnings)); then
      output+=("Success")
      rm -f "$logFile"
    fi
  fi

  # print everything to STDOUT
  for line in "${output[@]}"; do
    echo "$line"
  done
  return "$status"

  notes << EOF
  Git Bash's "cmd.exe" is the only syntax variant which doesn't mangle arguments. However, that syntax
  breaks Cygwin's POSIX launcher. So we go with "cmd" and manually demangle in the helper batch file.
  The helper file does not simply hold the final command to allow multiple parallel compilations.

  metaeditor.exe's exit code is the number of successfully processed files (0 = error). It doesn't
  produce any error messages.

  syntax errors without /log option
  ---------------------------------
  $ MSYS_NO_PATHCONV=1 metaeditor.exe /compile:Exists.mq4; echo $?
  0 (no "metaeditor.log")

  input file not found
  --------------------
  $ MSYS_NO_PATHCONV=1 metaeditor.exe /compile:DoesntExist.mq4 /log:custom.log; echo $?
  0 (no "custom.log", no "metaeditor.log")
EOF
}


#
# Compile an MQL5 source file.
#
# @param $1 - filename
#
function compileMql5() {
  [[ -z "$MT5_METAEDITOR" ]] && { error "ERROR: MQL5 compiler is not configured"; exit 1; }
  [[ -f "$MT5_METAEDITOR" ]] || { error "ERROR: MQL5 compiler not found: \"$MT5_METAEDITOR\""; exit 1; }

  local helper="$(dirname "$(realpath "$0")")/helper.bat"
  [[ -f "$helper" ]] || { error "ERROR: compiler helper not found: \"$helper\""; exit 1; }
  [[ "$helper" =~ \  ]] && helper="$(cygpath -d "$helper")"   # the DOS name prevents argument mangling of quotes (which would break the call)

  local mqlc="$(cygpath -w "$(prefixHyphen "$MT5_METAEDITOR")")" srcFile="$1" logFile="${1%.*}.log"
  local compilerCmd="\"$mqlc\" /compile:\"$srcFile\"" status=0
  [[ -n "$includeDir" ]] && compilerCmd="$compilerCmd /include:\"$includeDir\""
  compilerCmd="$compilerCmd /log:\"$logFile\""

  (($original)) || echo "Compiling \"$srcFile\" as MQL5"
  MSYS_NO_PATHCONV=1 cmd /c "$helper $compilerCmd" < /dev/null 2>&1 || status=$?
  [[ -f "$logFile" ]] || { error "ERROR: logfile \"$logFile\" not found (status $status)."; exit 1; }

  # store the logfile in an array (convert to Unix EOL, filter blank lines and infos)
  local output=() line= M= errors=0 warnings=0
  mapfile -t output < <(
    (($original)) && M="rosasurfer"                           # marker to skip filtering if option --original is enabled
    iconv -c -f UTF-16 -t UTF-8 "$logFile" | tr -d '\r' | grep -v -E "^$M[[:space:]]*$|$M: information: (compiling|including|generating code|code generated)"
  )

  if ((!$original)); then
    [[ "${output[-1]}" =~ ([0-9]+)\ errors,\ ([0-9]+)\ warnings ]] || { error "ERROR: unexpected compiler output in last line: \"${output[-1]}\""; exit 1; }
    errors="${BASH_REMATCH[1]}"
    warnings="${BASH_REMATCH[2]}"

    # append success or error message
    status=0
    if (($errors)); then
      output+=("Error")
      status="$errors"
    elif ((!$warnings)); then
      output+=("Success")
      rm -f "$logFile"
    fi
  fi

  # print everything to STDOUT
  for line in "${output[@]}"; do
    echo "$line"
  done
  return "$status"

  notes << EOF
  Git Bash's "cmd.exe" is the only syntax variant which doesn't mangle arguments. However, that syntax
  breaks Cygwin's POSIX launcher. So we go with "cmd" and manually demangle in the helper batch file.
  The helper file does not simply hold the final command to allow multiple parallel compilations.

  metaeditor64.exe's exit code is the number of successfully processed files (0 = error). It doesn't
  produce any error messages.

  executable renamed
  ------------------
  $ MSYS_NO_PATHCONV=1 metaeditor64_.exe /compile:Exists.mq5 /log:custom.log; echo $?
  0 (no "custom.log", no "metaeditor.log")

  input file not found
  --------------------
  $ MSYS_NO_PATHCONV=1 metaeditor64.exe /compile:DoesntExist.mq5 /log:custom.log; echo $?
  0 (no "custom.log", no "metaeditor.log")

  syntax errors without /log option
  ---------------------------------
  $ MSYS_NO_PATHCONV=1 metaeditor64.exe /compile:Exists.mq5; echo $?
  0 (summary in "metaeditor.log")
EOF
}


# --- end of functions ---------------------------------------------------------------------------------------------------------------------


# parse command line arguments
((!"$#")) && { help; exit 0; }

srcFiles=() && srcDirs=() && includeDir= && log=0 && customLog= && format=
delimiterPassed=0 && clean=0 && syntax=0 && original=0 quiet=0 && && warn2err=0

while [[ "$#" -gt 0 ]]; do
  if ((!$delimiterPassed)); then      # enter case only before an argument delimiter
    case "$1" in
      --)
        delimiterPassed=1
        shift; continue;;

      [-/]h|--help)
        help; exit 0;;

      [-/]c|--clean)
        clean=1
        shift; continue;;

      [-/]s|--syntax)
        syntax=1
        shift; continue;;

      [-/]o|--original)
        original=1
        shift; continue;;

      [-/]q|--quiet)
        quiet=1
        shift; continue;;

      [-/]w)
        warn2err=1
        shift; continue;;

      [-/]f|[-/]f[=:]*)
        [[ -n "$format" ]] && { error "ERROR: multiple MQL4 version options"; exit 1; }
        [[ ${#1} -gt 3  ]] || { error "ERROR: missing MQL4 version identifier: $1"; exit 1; }
        format="${1:3}"
        format="${format,,}"
        [[ "$format" == mql4[05] ]] || { error "ERROR: invalid MQL4 version identifier \"${1:3}\" (expect \"mql40\" or \"mql45\")"; exit 1; }
        shift; continue;;

      /include|/include[=:]*)
        [[ -n "$includeDir" ]] && { error "ERROR: multiple /include options"; exit 1; }
        includeDir="$(normalizeArg "${1:9}")"
        [[ -z "$includeDir" ]] && { error "ERROR: missing argument: $1"; exit 1; }
        [[ -d "$includeDir" ]] || { error "ERROR: directory not found: $1"; exit 1; }
        includeDir="$(cygpath -w "$(prefixHyphen "$includeDir")")"
        shift; continue;;

      /log|/log[=:]*)
        [[ "$log" -eq 1 ]] && { error "ERROR: multiple /log options"; exit 1; }
        log=1
        if [[ ${#1} -gt 4 ]]; then
          customLog="$(normalizeArg "${1:5}")"
          [[ -z "$customLog" ]] && { error "ERROR: missing argument: $1"; exit 1; }
          customLog="$(cygpath -w "$(prefixHyphen "$customLog")")"
        fi
        shift; continue;;

      /compile[=:]*)
        arg="$(normalizeArg "${1:9}")"
        [[ -z "$arg" ]] && { error "ERROR: missing argument: $1"; exit 1; }
        # processing continues after the case block
        ;;
    esac
  fi

  # source files/directories before/after an argument delimiter, standalone or as /compile argument
  if (($delimiterPassed)) || [[ "$1" != /compile* ]]; then
    arg="$(normalizeArg "$1")"
  fi
  argBak="$arg"
  arg="$(cygpath -w "$(prefixHyphen "$arg")")"

  if [[ -d "$arg" ]]; then
    srcDirs+=("$arg")
  elif [[ -f "$arg" ]]; then
    ext="$(getFileExtension "$arg")"
    [[ "${ext,,}" == mq[45] ]] || { error "ERROR: cannot compile file \"$argBak\""; exit 1; }
    srcFiles+=("$arg")
  else
    arg="$1"
    [[ "$arg" =~ ^[[:space:]]*$ ]] && arg="\"$arg\""
    error "ERROR: file or directory not found: $arg"
    exit 1
  fi
  shift
done
readonly srcFiles srcDirs includeDir log customLog format clean syntax original quiet warn2err

((${#srcFiles[@]} || ${#srcDirs[@]})) || { error "ERROR: missing source file/directory argument"; exit 1; }

readConfig


# process each source file
status=0
for file in "${srcFiles[@]}"; do
  version="$(resolveMqlVersion "$file")"

  case "$version" in
    mql40)
      compileMql40 "$file" || status=$?;;
    mql45)
      compileMql45 "$file" || status=$?;;
    mql5)
      compileMql5 "$file" || status=$?;;
    *)
      error "ERROR: cannot resolve MQL version of \"$file\""
      exit 1;;
  esac
done

exit $status



'
MQL4.5 + MQL5
-------------
- compile single file
  $ metaeditor.exe /compile:<filename-without-spaces>
  $ metaeditor.exe /compile:"<filename with spaces>"

- compile whole directory (recompiles only if a source file is newer than the compiled version, no subdirectories)
  $ metaeditor.exe /compile:"<target-directory>"

- use custom include directory (default: "mql4/5" in directory containing metaeditor.exe)
  $ metaeditor.exe /include:"<separate-mql-directory>"                                                      # can be shortened to /inc:

- create log file named <source-file.log>, without errors are logged to "<data-dir>/logs/metaeditor.log"
  $ metaeditor.exe /compile:"<source>" /log

- create custom log file, not supported when compiling directories
  $ metaeditor.exe /compile:"<source>" /log:"<log-filename>"

- check syntax only (no compilation)
  $ metaeditor.exe /compile:"<source>" /s


MT4 after installation
----------------------
metaeditor.exe /packed:21 /compile:"103304111_21238" /inc:"E:\Trading\MetaTrader\versions\1417\MQL4" /flg:2


MT5 after installation
----------------------
metaeditor64.exe /portable /compile:"E:\Trading\MetaTrader5\MQL5" /inc:"E:\Trading\MetaTrader5\MQL5" /time:1743564639 /flg:0 /stop:se5296_103760508


metalang.exe -h
---------------
MetaQuotes Language 4 compiler version 4.00 build 224 (14 May 2009)
Copyright 2001-2009, MetaQuotes Software Corp.

usage: metalang.exe [options] filename
options:
-q : quiet mode


old multi-compiler (MT4 builds 600...615)
-----------------------------------------
mql.exe [<flags>] filename.mq5
        /mql5     - compile mql5 source
        /mql4     - compile mql4 source
        /s        - syntax check only
        /i:<path> - set working directory
        /o        - use code optimizer


UltraEdit
---------
bash /f/Projects/mt4/mql/bin/mqlc "%f" -f=mql40
bash /f/Projects/mt4/mql/bin/mqlc "%f" /include:/f/Projects/mt4/mql/mql45 -f=mql45
bash /f/Projects/mt4/mql/bin/mqlc "%f" /include:/f/Projects/mt4/mql/mql50


@see  https://stackoverflow.com/questions/356100/how-to-wait-in-bash-for-several-subprocesses-to-finish-and-return-exit-code-0
