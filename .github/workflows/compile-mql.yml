#
# Compile all MQL programs, create a ZIP file with sources and compiled binaries and notify the build tracker.
#
# TODO:
# - cache the compilers
#
name: Compile MQL programs

on:
  push:
    branches:
      - master

  pull_request:
    branches:
      - master

permissions:
  contents: read

jobs:
  compile-mql:
    runs-on: windows-2022
    defaults:
      run:
        shell: bash

    steps:
      # ------------------------------------------------------------------------------------------------------------------------------------
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0                                # fetch all branches and history (to access the source branch of PRs)

      # ------------------------------------------------------------------------------------------------------------------------------------
      - name: Check commit message for "[skip ci]"
        run: |
          SKIP_CI=false
          REF_NAME=
          [[ "$GITHUB_EVENT_NAME" == "push"         ]] && REF_NAME="$GITHUB_REF_NAME"
          [[ "$GITHUB_EVENT_NAME" == "pull_request" ]] && REF_NAME="$GITHUB_HEAD_REF"
          [[ -z "$REF_NAME" ]] && { echo "ERROR: unsupported CI event: $GITHUB_EVENT_NAME"; exit 1; }

          COMMIT_MSG="$(git log -1 --format="%B" "origin/$REF_NAME")"
          grep -iq '\[skip ci\]' <<< "$COMMIT_MSG" && { echo "Magic commit message found: [skip ci]"; SKIP_CI=true; }
          echo "Skip CI: $SKIP_CI"
          echo "SKIP_CI=$SKIP_CI" >> "$GITHUB_ENV"

      # ------------------------------------------------------------------------------------------------------------------------------------
      - name: Setup MQL compilers
        if:   env.SKIP_CI != 'true'
        env:
          MT4_METALANG_URL:   ${{ secrets.MT4_METALANG_URL }}
          MT4_METAEDITOR_URL: ${{ secrets.MT4_METAEDITOR_URL }}
          AUTH_USERNAME:      ${{ secrets.MT4_URL_AUTH_USERNAME }}
          AUTH_PASSWORD:      ${{ secrets.MT4_URL_AUTH_PASSWORD }}
        run: |
          echo "Downloading MT4 compiler from https://.../mt4${MT4_METALANG_URL#*/mt4}"
          curl -o metalang.exe --digest -u "$AUTH_USERNAME:$AUTH_PASSWORD" "$MT4_METALANG_URL" --silent --fail --show-error --connect-timeout 10 --max-time 60
          echo "MT4_METALANG=$PWD/metalang.exe" >> "$GITHUB_ENV"

          echo "Downloading MT4 MetaEditor from https://.../mt4${MT4_METAEDITOR_URL#*/mt4}"
          curl -o metaeditor.exe --digest -u "$AUTH_USERNAME:$AUTH_PASSWORD" "$MT4_METAEDITOR_URL" --silent --fail --show-error --connect-timeout 10 --max-time 60
          echo "MT4_METAEDITOR=$PWD/metaeditor.exe" >> "$GITHUB_ENV"

      # ------------------------------------------------------------------------------------------------------------------------------------
      - name: Compile MQL files
        if:   env.SKIP_CI != 'true'
        run: |
          TRACE=1 \
          bin/mqlc -v=mql40 /inc:mql40 mql40/experts mql40/experts/tools mql40/indicators mql40/indicators/.attic mql40/scripts mql40/libraries \
                   -v=mql45 /inc:mql45 mql45/experts mql45/indicators mql45/scripts mql45/libraries \
                   --warn2error

      # ------------------------------------------------------------------------------------------------------------------------------------
      - name: Prepare build artifact
        if:   github.event_name == 'push' && env.SKIP_CI != 'true'
        run: |
          COMMIT_TIMESTAMP='${{ github.event.head_commit.timestamp }}'

          echo "Setting directory tree to commit timestamp: $COMMIT_TIMESTAMP"
          find . -exec touch -a -m -d "$COMMIT_TIMESTAMP" {} +

          COMMIT_TIME="$(date -u -d "$COMMIT_TIMESTAMP" '+%Y.%m.%d_%H.%M')"
          echo "COMMIT_TIME=$COMMIT_TIME" >> "$GITHUB_ENV"

      # ------------------------------------------------------------------------------------------------------------------------------------
      - name: Create build artifact
        id:   artifact
        if:   github.event_name == 'push' && env.SKIP_CI != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.repository_owner }}-${{ github.event.repository.name }}-${{ env.COMMIT_TIME }}.bin
          path: |
            bin/
            config/
            etc/
            mql*/
            !mql40/indicators/.attic/
            sounds/*.mp3
            sounds/*.wav
            templates*/*.tpl
            !**/.git*
            LICENSE
            README.md
          include-hidden-files: true

      # ------------------------------------------------------------------------------------------------------------------------------------
      - name: Notify build tracker
        if:   github.event_name == 'push' && env.SKIP_CI != 'true'
        env:
          BUILD_TRACKER_URL:  ${{ secrets.BUILD_TRACKER_URL }}
          BUILD_TRACKER_USER: ${{ secrets.BUILD_TRACKER_USERNAME }}
          BUILD_TRACKER_PASS: ${{ secrets.BUILD_TRACKER_PASSWORD }}
        run: |
          echo "Notifying build tracker at https://.../mt4${BUILD_TRACKER_URL#*/mt4}"

          response_file="$(mktemp)"
          status="$(curl -X POST "$BUILD_TRACKER_URL" -L --silent --connect-timeout 10 --max-time 30 \
                         --digest -u "$BUILD_TRACKER_USER:$BUILD_TRACKER_PASS" \
                         -o "$response_file" -w '%{http_code}' \
                         -d 'repository=${{ github.repository }}' \
                         -d 'artifact-id=${{ steps.artifact.outputs.artifact-id }}')"
          echo "HTTP status: $status"
          cat "$response_file"

          ((status >= 400)) && exit 1 || :

      # ------------------------------------------------------------------------------------------------------------------------------------
