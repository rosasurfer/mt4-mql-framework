#!/bin/bash
#
# A multi-version wrapper for compiling MQL4.0, MQL4.5 and MQL5 source files. Supports batch-processing of multiple files
# and directories. Prints results to STDOUT and follows standard rules for the exit status. The syntax is compatible with
# the syntax of MetaEditor.
#
# Configuration via environment or config file.
#
# @see  "/.env.dist"
# @see  https://www.metatrader5.com/en/metaeditor/help/beginning/integration_ide#compiler
#
#
# TODO:
#  - preconfigured versions per directory
#  - auto-detect version
#
#  - preconfigured include dir per directory
#  - auto-detect include directory to use
#  - fix /portable issue without /include option
#  - support /inc:
#
#  - fix error when a specified directory doesn't contain sources
#  - add compiler version to output
#  - add elapsed time to mql40 output
#  - reformat compiler messages
#  - normalize source names and filter duplicates
#  - support Windows filenames/paths as arguments
#  - improve error messages for filenames looking like options
#  - move config to standard location
#  - colored output
#
#  - parallel compilation of multiple files
#
set -eu -o pipefail


# --- functions ----------------------------------------------------------------------------------------------------------------------------


#
# Show the help screen.
#
function help() {
  cat << 'SYNTAX'
Compiles one or more MQL4.0, MQL4.5 or MQL5 source files or directories.

Usage: mqlc  [options] [--] SOURCE...
       mqlc  [options] /compile:(FILE|DIR)... [/include:DIR]... [/log[:FILE]]

Arguments:
  SOURCE           One or more source files or directories to compile. Supports wildcards.

Options:
  -h --help        This screen.
  /compile:FILE    Source file to compile. Doesn't support wildcards.
  /compile:DIR     Source directory to compile. Recompiles new and modified source files (not in subdirectories).
  /include:DIR     Custom MQL directory for all sources following the option (default: "<data-dir>/MQL4" or "<data-dir>/MQL5").
  /log             Writes all output to file "<source-file.log>" (default: no log on success, always log errors/warnings).
  /log:FILE        Writes all output to a custom log file.
  -v= --version=   Auto-detects the version of all MQL4 sources following the option (default). See below.
  -v=VERSION       Explicit version of all MQL4 sources following the option, either "mql40" or "mql45".
  -s --syntax      Syntax check only, no compilation.
  -o --original    Preserves the original and unmodified compiler output, followed by the original exit status.
  -w --warn2error  Treats compiler warnings as errors, affects the exit status for warnings.

Auto-detection of MQL versions:
 ".mq5" files are always processed as MQL5, a specified version has no effect.
 ".mq4" files: If the base name of the MQL include directory resolves to "experts" or "mql40", version "mql40" is assumed.
 ".mq4" files: If the base name of the MQL include directory resolves to "mql4" or "mql45", version "mql45" is assumed.
 Default MQL versions for custom directories can be predefined in the configuration (see "/.env.dist").

The compilers to be used can be specified in the environment or predefined in the configuration (see "/.env.dist").

The script exits with 0 (success) or with the number of errors of the last failing compilation.

SYNTAX
}


#
# Print a message to STDERR.
#
# @param $@ - any number of arguments
#
function error() {
  echo "$@" 1>&2
}


#
# Sanitize a filename/path argument. Strips enclosing double quotes and trims white-space.
#
# @param $1 - name
#
function sanitizeName() {
  local str="$1"
  [[ "$str" =~ ^\"(.*)\"$ ]] && str="${BASH_REMATCH[1]}"    # strip enclosing double quotes

  str="${str#"${str%%[![:space:]]*}"}"                      # trim leading white space
  str="${str%"${str##*[![:space:]]}"}"                      # trim trailing white space

  echo "$str"
}


#
# cygpath doesn't support the "--" option separator. If the passed name starts with "-" it breaks.
# This function works around that issue.
#
# @param $1 - cygpath conversion modifier
# @param $2 - filename/path
#
function cygpath() {
  local name="$2"
  [[ "$name" == -* ]] && name="./$name"
  command cygpath "$1" "$name"
}


#
# Return the file extension of the passed name.
#
# @param $1 - filename
#
function getFileExtension() {
  local ext="${1##*.}"
  [[ "$1" == "$ext" ]] && ext=
  echo "$ext"
}


#
# Resolve the MQL version of a source file, taking into account an explicit or configured value.
#
# @param $1 - filename
# @param $2 - input version
#
function resolveMqlVersion() {
  local ext; ext="$(getFileExtension "$1")"
  [[ "${ext,,}" == "mq5" ]] && echo "mql5" || echo "$2"
}


#
# Resolve the MQL include directory for a source file, taking into account an explicit or configured value.
#
# @param $1 - filename
# @param $2 - MQL version id
# @param $3 - input include dir
#
function resolveIncludeDir() {
  echo "$3"
}


#
# Read the configuration into global vars.
#
function readConfig() {
  # backup existing env vars
  local BAK_MT4_METALANG="${MT4_METALANG:-}"
  local BAK_MT4_METAEDITOR="${MT4_METAEDITOR:-}"
  local BAK_MT5_METAEDITOR="${MT5_METAEDITOR:-}"

  # source an existing .env file
  local scriptDir; scriptDir="$(dirname "$(realpath "$0")")"
  local envFile="$scriptDir/../.env"
  [[ -f "$envFile" ]] && . "$envFile"

  # resolve final values: environment precedes config file
  MT4_METALANG="${BAK_MT4_METALANG:-${MT4_METALANG:-}}"
  MT4_METAEDITOR="${BAK_MT4_METAEDITOR:-${MT4_METAEDITOR:-}}"
  MT5_METAEDITOR="${BAK_MT5_METAEDITOR:-${MT5_METAEDITOR:-}}"

  # validate base names
  if [[ -n "$MT5_METAEDITOR" ]]; then
    basename="$(basename "$MT5_METAEDITOR")"
    [[ "${basename,,}" != "metaeditor64.exe" ]] && { error "ERROR: The base name of the MT5 MetaEditor must be: \"metaeditor64.exe\""; exit 1; }
  fi
  readonly MT4_METALANG MT4_METAEDITOR MT5_METAEDITOR
}


#
# Compile an MQL4.0 source file.
#
# @param $1 - filename
# @param $2 - MQL version id (not used)
# @param $3 - include directory
#
function compileMql40() {
  local srcFile="$1" include="$3" mqlc='' errorStatus=0 output=() line='' errors=0 epl='' warnings=0 wpl='' retVal

  [[ -z "$MT4_METALANG" ]] && { error "ERROR: MQL4.0 compiler is not configured"; exit 1; }
  [[ -f "$MT4_METALANG" ]] || { error "ERROR: MQL4.0 compiler not found: \"$MT4_METALANG\""; exit 1; }
  mqlc="$MT4_METALANG"

  # call the compiler
  ((originalOutput)) || echo "Compiling \"$srcFile\" as MQL4.0"
  mapfile -t output < <(
    { MSYS_NO_PATHCONV=1 "$mqlc" "$srcFile" < /dev/null 2>&1 || errorStatus=$?; echo "$errorStatus"; } | tr -d '\r'
  )
  errorStatus="${output[-1]}"                                         # fetch error status from output and remove it
  unset 'output[-1]'

  # on success
  if ((!errorStatus)); then
    [[ "${output[-1]}" =~ ^(Exp|Library exp)\ file\ .+\ produced\ -\ ([0-9]+)\ error.+\ ([0-9]+)\ warning.+ ]] || {
      error "ERROR: unexpected compiler output in last line: \"${output[-1]}\""
      exit 1
    }
    errors="${BASH_REMATCH[2]}";   ((errors   == 1)) && epl='' || epl='s'
    warnings="${BASH_REMATCH[3]}"; ((warnings == 1)) && wpl='' || wpl='s'

    if ((!originalOutput)); then
      output[-1]="Result: $errors error$epl, $warnings warning$wpl"
      ((!warnings))              && output+=("Success")
      ((warnings && warn2error)) && output+=("Error")
    fi
  fi

  # on error
  if ((errorStatus)); then
    if [[ ${#output[@]} -lt 4 ]]; then                              # no error messages happen for empty source files only
      ((errorStatus != 127)) && { error "ERROR: unexpected compiler output for status $errorStatus: no error message"; exit 1; }
      ((originalOutput)) || output+=("2;356;$srcFile;1:1;'' - event handling function not found")
      ((errors++)) || :
    else
      # count errors and warnings
      local i
      for ((i=3; i < ${#output[@]}; i++)); do
        [[ "${output[i]}" != [0-9]* ]] && break
        [[ "${output[i]}" == [1]* ]] && { ((warnings++)) || :; continue; }
        [[ "${output[i]}" == [2]* ]] && { ((errors++))   || :; continue; }
        error "ERROR: unknown message type in: ${output[i]}"
        exit 1
      done
    fi

    if ((!originalOutput)); then
      [[ "${output[-1]}" =~ ^[[:space:]]*$ ]] && unset 'output[-1]'   # remove an empty last line
      [[ "${output[-1]}" == See\ logfile*  ]] && unset 'output[-1]'   # remove a logfile hint
      [[ "${output[-1]}" == Errors--[0-9]* ]] && unset 'output[-1]'   # remove an error counter
      [[ "${output[-1]}" =~ ^[[:space:]]*$ ]] && unset 'output[-1]'   # remove another empty last line

      # add final results
      ((errors   == 1)) && epl='' || epl='s'
      ((warnings == 1)) && wpl='' || wpl='s'
      output+=("Result: $errors error$epl, $warnings warning$wpl")
      output+=("Error")
    fi
  fi

  if ((originalOutput)); then
    output+=("$errorStatus")
  else
    # more compact output
    ((compactOutput)) && [[ "${output[2]}" =~ ^[[:space:]]*$ ]] && unset 'output[2]'
    # remove copyright
    [[ "${output[1]}" =~ ^Copyright\ [0-9]+-[0-9]+,\ MetaQuotes ]] && unset 'output[1]'
  fi

  # print everything to STDOUT
  for line in "${output[@]}"; do
    echo "$line"
  done

  ((warn2error)) || warnings=0
  ((retVal = errors + warnings))
  ((retVal > 255)) && retVal=255
  return "$retVal"

  notes << EOF
  metalang.exe's exit code is the number of encountered errors (0 = no errors but possibly warnings).

  success w/o warnings
  --------------------
  $ MSYS_NO_PATHCONV=1 metalang.exe "Dow Jones Breakout.mq4"; echo $?
  MetaQuotes Language 4 compiler version 4.00 build 224 (14 May 2009)
  Copyright 2001-2009, MetaQuotes Software Corp.

  Exp file "Dow Jones Breakout.ex4" produced - 0 error(s), 0 warning(s)
  0

  success with warnings
  ---------------------
  $ MSYS_NO_PATHCONV=1 metalang.exe "Dow Jones Breakout.mq4"; echo $?
  MetaQuotes Language 4 compiler version 4.00 build 224 (14 May 2009)
  Copyright 2001-2009, MetaQuotes Software Corp.

  1;33;C:\z\F\Projects\mt4\mql\bin\Dow Jones Breakout.mq4;149:8;'5' - comparison expression expected
  Exp file "Dow Jones Breakout.ex4" produced - 0 error(s), 1 warning(s)
  0

  syntax errors
  -------------
  $ MSYS_NO_PATHCONV=1 metalang.exe "Dow Jones Breakout.mq4"; echo $?
  MetaQuotes Language 4 compiler version 4.00 build 224 (14 May 2009)
  Copyright 2001-2009, MetaQuotes Software Corp.

  2;124;C:\z\F\Projects\mt4\mql\bin\Dow Jones Breakout.mq4;146:12;'HandleCommand' - function is not defined
  1;33;C:\z\F\Projects\mt4\mql\bin\Dow Jones Breakout.mq4;149:8;'5' - comparison expression expected

  Errors--1
  See logfile "Dow Jones Breakout.log"

  1

  parser errors
  -------------
  $ MSYS_NO_PATHCONV=1 metalang.exe "Dow Jones Breakout.mq4"; echo $?
  MetaQuotes Language 4 compiler version 4.00 build 224 (14 May 2009)
  Copyright 2001-2009, MetaQuotes Software Corp.

  2;89;C:\z\F\Projects\mt4\mql\bin\Dow Jones Breakout.mq4;526:1;'\end_of_program' - unbalanced left parenthesis
  1

  empty source file
  -----------------
  $ MSYS_NO_PATHCONV=1 metalang.exe empty.mq4; echo $?
  MetaQuotes Language 4 compiler version 4.00 build 224 (14 May 2009)
  Copyright 2001-2009, MetaQuotes Software Corp.
  127

  regular text file as source
  ---------------------------
  $ MSYS_NO_PATHCONV=1 metalang.exe output.txt; echo $?
  MetaQuotes Language 4 compiler version 4.00 build 224 (14 May 2009)
  Copyright 2001-2009, MetaQuotes Software Corp.

  2;114;C:\z\F\Projects\mt4\mql\bin\output.txt;11:53;'some pewa text' - more than 1 symbol
  127

  binary source file
  ------------------
  $ MSYS_NO_PATHCONV=1 metalang.exe metalang.exe; echo $?
  MetaQuotes Language 4 compiler version 4.00 build 224 (14 May 2009)
  Copyright 2001-2009, MetaQuotes Software Corp.

  1;41;C:\z\F\Projects\mt4\mql\bin\metalang.exe;1:1;'MZ???' - expression on global scope not allowed
  2;75;C:\z\F\Projects\mt4\mql\bin\metalang.exe;1:1;'MZ???' - variable not defined
  1

  input file not found
  --------------------
  $ MSYS_NO_PATHCONV=1 metalang.exe no-exist.mq4; echo $?
  MetaQuotes Language 4 compiler version 4.00 build 224 (14 May 2009)
  Copyright 2001-2009, MetaQuotes Software Corp.

  2;76;;;cannot open the program file
  127

  access to output file denied
  ----------------------------
  $ MSYS_NO_PATHCONV=1 metalang.exe ChartInfos.mq4; echo $?
  MetaQuotes Language 4 compiler version 4.00 build 224 (14 May 2009)
  Copyright 2001-2009, MetaQuotes Software Corp.

  2;52;;;cannot open the output expert file
  1
EOF
}


#
# Compile an MQL4.5/MQL5 source file.
#
# @param $1 - filename
# @param $2 - MQL version id
# @param $3 - include directory
#
function compileMql5() {
  local version="$2" versionName='' helper='' compilerCmd='' mqlc='' srcFile="$1" include="$3" logFile="${1%.*}.log" includeOption='' errorStatus=0

  if [[ "$version" == 'mql45' ]]; then
    versionName='MQL4.5'
    [[ -z "$MT4_METAEDITOR" ]] && { error "ERROR: $versionName compiler is not configured"; exit 1; }
    [[ -f "$MT4_METAEDITOR" ]] || { error "ERROR: $versionName compiler not found: \"$MT4_METAEDITOR\""; exit 1; }
    mqlc="$(cygpath -w "$MT4_METAEDITOR")"
  else
    versionName='MQL5'
    [[ -z "$MT5_METAEDITOR" ]] && { error "ERROR: $versionName compiler is not configured"; exit 1; }
    [[ -f "$MT5_METAEDITOR" ]] || { error "ERROR: $versionName compiler not found: \"$MT5_METAEDITOR\""; exit 1; }
    mqlc="$(cygpath -w "$MT5_METAEDITOR")"
  fi

  helper="$(getCmdHelper)"
  [[ -n "$include" ]] && includeOption="/include:\"$include\""
  compilerCmd="\"$mqlc\" /compile:\"$srcFile\" $includeOption /log:\"$logFile\""

  ((originalOutput)) || echo "Compiling \"$srcFile\" as $versionName"
  MSYS_NO_PATHCONV=1 cmd /c "$helper $compilerCmd" < /dev/null 2>&1 || errorStatus=$?
  [[ -f "$logFile" ]] || { error "ERROR: logfile \"$logFile\" not found (status $errorStatus)."; exit 1; }

  # store the logfile in an array (convert to Unix EOL, filter blank lines and infos)
  local output=() line='' M='' errors=0 warnings=0
  mapfile -t output < <(
    ((originalOutput)) && M="rosasurfer"                      # marker to skip filtering if option --original is enabled
    iconv -c -f UTF-16 -t UTF-8 "$logFile" | tr -d '\r' | grep -v -E "^${M}[[:space:]]*$|${M}: information: (compiling|including|generating code|code generated)"
  )

  [[ "${output[-1]}" =~ ([0-9]+)\ errors,\ ([0-9]+)\ warnings ]] || { error "ERROR: unexpected compiler output in last line: \"${output[-1]}\""; exit 1; }
  errors="${BASH_REMATCH[1]}"
  warnings="${BASH_REMATCH[2]}"
  ((!errors && !warnings)) || rm -f "$logFile"

  if ((originalOutput)); then
    output+=("$errorStatus")
  else
    ((!errors && !warnings))               && output+=("Success")
    ((errors || (warn2error && warnings))) && output+=("Error")
  fi

  # print everything to STDOUT
  for line in "${output[@]}"; do
    echo "$line"
  done

  ((warn2error)) || warnings=0
  ((retVal = errors + warnings))
  ((retVal > 255)) && retVal=255
  return "$retVal"

  notes << EOF
  Git Bash's "cmd.exe" is the only syntax variant which doesn't mangle arguments. However, that syntax
  breaks Cygwin's POSIX launcher. So we go with "cmd" and manually demangle in the helper batch file.
  The helper file cannot just hold the final command as that doesn't support parallel executions.

  MetaEditor's exit code is the number of successfully processed files (0 = error). It doesn't produce
  any error messages.


  renamed executable
  ------------------
  $ MSYS_NO_PATHCONV=1 metaeditor64_.exe /compile:Exists.mq5 /log:custom.log; echo $?
  0 (no "custom.log", no "metaeditor.log")


  syntax errors without /log option
  ---------------------------------
  $ MSYS_NO_PATHCONV=1 metaeditor.exe /compile:Exists.mq4; echo $?
  0 (no "metaeditor.log")

  $ MSYS_NO_PATHCONV=1 metaeditor64.exe /compile:Exists.mq5; echo $?
  0 (summary in "metaeditor.log")


  input file not found
  --------------------
  $ MSYS_NO_PATHCONV=1 metaeditor*.exe /compile:DoesntExist.mq4 /log:custom.log; echo $?
  0 (no "custom.log", no "metaeditor.log")

EOF
}


#
# Creates a helper batch file for "cmd.exe" and returns its full DOS name.
# The name doesn't contain any spaces and needs no quoting.
#
function getCmdHelper() {
  local helper='' code;
  code=$(cat << 'EOF'
@echo off

set arg=%1
if not defined arg (
  echo ERROR: %~nx0 - missing arguments
  exit /b 1
)

set command=
set args=

:loop
set arg=%1
if not defined arg goto run

call set "arg=%%arg:\"="%%"

if not defined command (
  set command=%arg%
) else if not defined args (
  set args=%arg%
) else (
  set args=%args% %arg%
)
shift
goto loop

:run
%command% %args%

exit /b %ERRORLEVEL%
EOF
)
  helper="$(dirname "$(realpath "$0")")/.helper.bat"
  [[ -f "$helper" && "$code" == "$(< "$helper")" ]] || printf "%s\n" "$code" > "$helper"

  # the DOS name prevents argument mangling of double quotes which would break the call
  if [[ "$helper" =~ \  ]]; then
    helper="$(cygpath -d "$helper")"
  else
    helper="$(cygpath -w "$helper")"
  fi

  echo "$helper"
}


# --- end of functions ---------------------------------------------------------------------------------------------------------------------


# parse command line arguments
((!"$#")) && { help; exit 0; }

declare srcFileNames=() srcArg=''
declare srcFileVersions=() version='' firstVersion=-1
declare srcFileIncludes=() include='' firstInclude=-1
declare log=0 customLog='' syntaxOnly=0 originalOutput=0 compactOutput=0 warn2error=0 delimiterPassed=0

while [[ "$#" -gt 0 ]]; do
  if ((!delimiterPassed)); then                           # enter case only before an option terminator
    case "$1" in
      --)
        delimiterPassed=1
        shift; continue;;

      -h|--help)
        help; exit 0;;

      [-/]s|--syntax)                                     # also support MetaEditor's option prefix
        syntaxOnly=1
        shift; continue;;

      -o|--original)
        originalOutput=1
        shift; continue;;

      -w|--warn2error)
        warn2error=1
        shift; continue;;

      -v|--version)
        error "ERROR: missing MQL4 version identifier: $1"
        exit 1;;

      -v=*|--version=*)
        version="${1#*=}"
        version="${version,,}"
        [[ -n "$version" && "$version" != mql4[05] ]] && { error "ERROR: invalid MQL4 version identifier in \"$1\" (expecting \"mql40\" or \"mql45\")"; exit 1; }
        if ((firstVersion < 0)); then
          for i in "${!srcFileVersions[@]}"; do
            srcFileVersions[i]="$version"                 # the first --version affects previous sources if no more sources follow
          done
          firstVersion="${#srcFileVersions[@]}"           # track position
        fi
        shift; continue;;

      /include|/include[=:]*)
        include="$(sanitizeName "${1:9}")"
        [[ -z "$include" ]] && { error "ERROR: missing argument: $1"; exit 1; }
        [[ -d "$include" ]] || { error "ERROR: directory not found: $1"; exit 1; }
        include="$(cygpath -w "$include")"
        if ((firstInclude < 0)); then
          for i in "${!srcFileIncludes[@]}"; do
            srcFileIncludes[i]="$include"                 # the first /include affects previous sources if no more sources follow
          done
          firstInclude="${#srcFileIncludes[@]}"           # track position
        fi
        shift; continue;;

      /log|/log[=:]*)
        [[ "$log" -eq 1 ]] && { error "ERROR: multiple /log options"; exit 1; }
        log=1
        if [[ ${#1} -gt 4 ]]; then
          customLog="$(sanitizeName "${1:5}")"
          [[ -z "$customLog" ]] && { error "ERROR: missing argument: $1"; exit 1; }
          customLog="$(cygpath -w "$customLog")"
        fi
        shift; continue;;

      /compile[=:]*)
        srcArg="$(sanitizeName "${1:9}")"
        [[ -z "$srcArg" ]] && { error "ERROR: missing argument: $1"; exit 1; }
        # processing continues after the case block
        ;;
    esac
  fi

  # source files/directories before/after an argument delimiter, standalone or as /compile: argument
  ((delimiterPassed)) || [[ "$1" != /compile* ]] && srcArg="$1"

  if [[ -d "$srcArg" ]]; then
    while IFS= read -r file; do
      srcFileNames+=("$file")
      srcFileVersions+=("${version:-auto}")
      srcFileIncludes+=("${include:-auto}")
    done < <(find "$srcArg" -maxdepth 1 -type f -iname '*.mq[45]')
  elif [[ -f "$srcArg" ]]; then
    ext="$(getFileExtension "$srcArg")"
    [[ "${ext,,}" != mq[45] ]] && { error "ERROR: cannot compile file \"$srcArg\""; exit 1; }
    srcFileNames+=("$srcArg")
    srcFileVersions+=("${version:-auto}")
    srcFileIncludes+=("${include:-auto}")
  else
    srcArg="$1"
    [[ "$srcArg" =~ ^[[:space:]]*$ ]] && srcArg="\"$srcArg\""
    error "ERROR: file or directory not found: $srcArg"
    exit 1
  fi

  if ((firstVersion > 0)); then
    for i in "${!srcFileVersions[@]}"; do
      ((i < firstVersion)) && srcFileVersions[i]="auto"   # the first --version affects previous sources only if no more sources follow
    done
    firstVersion=0                                        # position of the first implied version = start of arguments
  fi

  if ((firstInclude > 0)); then
    for i in "${!srcFileIncludes[@]}"; do
      ((i < firstInclude)) && srcFileIncludes[i]="auto"   # the first /include affects previous sources only if no more sources follow
    done
    firstInclude=0                                        # position of the first implied /include = start of arguments
  fi
  shift
done

((!${#srcFileNames[@]})) && { error "ERROR: missing source file/directory argument"; exit 1; }
((${#srcFileNames[@]} > 1)) && compactOutput=1

readonly srcFileNames
readonly srcFileVersions firstVersion
readonly srcFileIncludes firstInclude
readonly log customLog syntaxOnly originalOutput compactOutput warn2error


# read configuration
readConfig


# process each source file
exitCode=0

for i in "${!srcFileNames[@]}"; do
  ((i)) && echo ""

  file="${srcFileNames[i]}"
  version="$(resolveMqlVersion "$file" "${srcFileVersions[i]}")"
  include="$(resolveIncludeDir "$file" "$version" "${srcFileIncludes[i]}")"
  status=0

  case "$version" in
    mql40)
      compileMql40 "$file" "$version" "$include" || status=$?;;
    mql45|mql5)
      compileMql5  "$file" "$version" "$include" || status=$?;;
    *)
      error "ERROR: cannot resolve MQL version of \"$file\""
      exit 1;;
  esac

  ((status)) && exitCode="$status"
done

exit "$exitCode"


# MQL4.5 + MQL5
# -------------
# - compile single file
#   $ metaeditor.exe /compile:<filename-without-spaces>
#   $ metaeditor.exe /compile:"<filename with spaces>"
#
# - compile whole directory (recompiles only if a source file is newer than the compiled version, no subdirectories)
#   $ metaeditor.exe /compile:"<target-directory>"
#
# - use custom include directory (default: "mql4/5" in directory containing metaeditor.exe)
#   $ metaeditor.exe /include:"<separate-mql-directory>"                                                      # can be shortened to /inc:
#
# - create log file named <source-file.log>, without errors are logged to "<data-dir>/logs/metaeditor.log"
#   $ metaeditor.exe /compile:"<source>" /log
#
# - create custom log file, not supported when compiling directories
#   $ metaeditor.exe /compile:"<source>" /log:"<log-filename>"
#
# - check syntax only (no compilation)
#   $ metaeditor.exe /compile:"<source>" /s
#
#
# MT4 after installation
# ----------------------
# metaeditor.exe /packed:21 /compile:"103304111_21238" /inc:"E:\Trading\MetaTrader\versions\1417\MQL4" /flg:2
#
#
# MT5 after installation
# ----------------------
# metaeditor64.exe /portable /compile:"E:\Trading\MetaTrader5\MQL5" /inc:"E:\Trading\MetaTrader5\MQL5" /time:1743564639 /flg:0 /stop:se5296_103760508
#
#
# metalang.exe -h
# ---------------
# MetaQuotes Language 4 compiler version 4.00 build 224 (14 May 2009)
# Copyright 2001-2009, MetaQuotes Software Corp.
#
# usage: metalang.exe [options] filename
# options:
# -q : quiet mode
#
#
# old multi-compiler (MT4 builds 600...615)
# -----------------------------------------
# mql.exe [<flags>] filename.mq5
#         /mql5     - compile mql5 source
#         /mql4     - compile mql4 source
#         /s        - syntax check only
#         /i:<path> - set working directory
#         /o        - use code optimizer
#
#
# UltraEdit
# ---------
# bash /f/Projects/mt4/mql/bin/mqlc "%f" -f=mql40
# bash /f/Projects/mt4/mql/bin/mqlc "%f" /include:/f/Projects/mt4/mql/mql45 -f=mql45
# bash /f/Projects/mt4/mql/bin/mqlc "%f" /include:/f/Projects/mt4/mql/mql5
#
#
# @see  https://stackoverflow.com/questions/356100/how-to-wait-in-bash-for-several-subprocesses-to-finish-and-return-exit-code-0
